<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Problema de las N Reinas</title>
  <style>
    body {
      font-family: sans-serif;
      text-align: center;
      background: #f0f0f0;
      margin: 10px;
    }
    h1 {
      margin-top: 20px;
    }
    .tablero {
      display: grid;
      margin: 20px auto;
      border: 2px solid #333;
      max-width: 95vw;
      overflow: auto;
    }
    .celda {
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 30px;
      user-select: none;
    }
    .oscura {
      background: #444;
      color: white;
    }
    .clara {
      background: #eee;
      color: black;
    }
    .posiciones {
      margin-top: 20px;
      font-size: 18px;
      white-space: pre-wrap;
      max-width: 95vw;
      margin-left: auto;
      margin-right: auto;
    }
    input, button {
      font-size: 16px;
      padding: 5px 10px;
      margin: 10px 5px;
    }
  </style>
</head>
<body>
  <h1>Problema de las N Reinas</h1>
  <div>
    <label for="inputN">Ingrese N (m√≠nimo 8): </label>
    <input id="inputN" type="number" min="8" value="8" />
    <button id="resolverBtn">Resolver</button>
  </div>
  <div class="tablero" id="tablero"></div>
  <div class="posiciones" id="posiciones"></div>

  <script>
    const tablero = document.getElementById('tablero');
    const posicionesDiv = document.getElementById('posiciones');
    const inputN = document.getElementById('inputN');
    const boton = document.getElementById('resolverBtn');

    function posicionValida(posiciones, fila, col) {
      for (let i = 0; i < fila; i++) {
        const otraCol = posiciones[i];
        if (
          otraCol === col ||
          Math.abs(otraCol - col) === fila - i
        ) {
          return false;
        }
      }
      return true;
    }

    function resolverNReinas(N) {
      let posiciones = [];

      function resolver(fila = 0) {
        if (fila === N) return true;
        for (let col = 0; col < N; col++) {
          if (posicionValida(posiciones, fila, col)) {
            posiciones[fila] = col;
            if (resolver(fila + 1)) return true;
          }
        }
        return false;
      }

      resolver();
      return posiciones;
    }

    function dibujarTablero(N, posiciones) {
      tablero.innerHTML = '';
      tablero.style.gridTemplateColumns = `repeat(${N}, 50px)`;
      tablero.style.width = `${N * 50}px`;

      for (let fila = 0; fila < N; fila++) {
        for (let col = 0; col < N; col++) {
          const celda = document.createElement('div');
          celda.classList.add('celda');
          const esClara = (fila + col) % 2 === 0;
          celda.classList.add(esClara ? 'clara' : 'oscura');
          if (posiciones[fila] === col) {
            celda.textContent = '‚ôõ';
          }
          tablero.appendChild(celda);
        }
      }
    }

    function mostrarPosiciones(posiciones) {
      const texto = posiciones.map((col, fila) => `[${fila}, ${col}]`).join(', ');
      posicionesDiv.textContent = `üìç Posiciones de las reinas: ${texto}`;
    }

    boton.addEventListener('click', () => {
      const N = parseInt(inputN.value);
      if (isNaN(N) || N < 8) {
        alert('Por favor ingrese un n√∫mero mayor o igual a 8.');
        return;
      }
      posicionesDiv.textContent = 'Calculando...';
      tablero.innerHTML = '';
      setTimeout(() => {
        const posiciones = resolverNReinas(N);
        dibujarTablero(N, posiciones);
        mostrarPosiciones(posiciones);
      }, 50);
    });

    // Mostrar tablero inicial con N=8 al cargar
    boton.click();
  </script>
</body>
</html>
